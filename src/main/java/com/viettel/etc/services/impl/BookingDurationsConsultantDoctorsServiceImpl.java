package com.viettel.etc.services.impl;import com.viettel.etc.dto.DoctorPriceDTO;import com.viettel.etc.dto.DoctorPriceRequestDTO;import com.viettel.etc.repositories.BookingDurationsConsultantDoctorsRepository;import com.viettel.etc.repositories.tables.CatsPhasesRepositoryJPA;import com.viettel.etc.services.BookingDurationsConsultantDoctorsService;import com.viettel.etc.services.MessageService;import com.viettel.etc.utils.Constants;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.TeleCareException;import com.viettel.etc.xlibrary.core.entities.ResultSelectEntity;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.time.LocalDate;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;/** * Autogen class: * * @author ToolGen * @date Mon Sep 14 15:13:32 ICT 2020 */@Servicepublic class BookingDurationsConsultantDoctorsServiceImpl implements BookingDurationsConsultantDoctorsService {    @Autowired    private BookingDurationsConsultantDoctorsRepository bookingDurationsConsultantDoctorsRepository;    @Autowired    private CatsPhasesRepositoryJPA catsPhasesRepositoryJPA;    @Autowired    private MessageService messageService;    /**     * Danh sach cac thoi luong kem gia co the dat tu van voi bac si     *     * @param itemParamsEntity params client     * @return     */    @Override    public DoctorPriceDTO getBookingDurationsConsultantDoctors(DoctorPriceDTO itemParamsEntity) throws TeleCareException {        /*        ==========================================================        itemParamsEntity: params nguoi dung truyen len        ==========================================================        */        List<DoctorPriceDTO> dataResult = bookingDurationsConsultantDoctorsRepository.getBookingDurationsConsultantDoctors(itemParamsEntity);        // cho phep khong can phase mac dinh//        if (CollectionUtils.isEmpty(dataResult) || dataResult.stream().noneMatch(doctor -> Integer.valueOf(0).equals(doctor.getPhaseId()))) {        if (CollectionUtils.isEmpty(dataResult)) {            throw new TeleCareException(messageService.getMessage(Constants.ERROR_CONFIG_PRICE, itemParamsEntity.getLanguage()), ErrorApp.ERROR_CONFIG_PRICE);        }        if (dataResult.size() == 1) {            return dataResult.get(0);        }        java.sql.Date now = java.sql.Date.valueOf(LocalDate.now());        Optional<DoctorPriceDTO> bookingDurationsConsultantDoctorsDTOOpt = dataResult.stream().filter(doctor -> !Integer.valueOf(0).equals(doctor.getPhaseId()))                .filter(doctor -> !CollectionUtils.isEmpty(catsPhasesRepositoryJPA.findByPhaseIdAndFromDateIsLessThanAndToDateIsGreaterThan(doctor.getPhaseId(), now)))                .findFirst();        if (bookingDurationsConsultantDoctorsDTOOpt.isPresent()) {            return bookingDurationsConsultantDoctorsDTOOpt.get();        }        return dataResult.stream().filter(doctor -> Integer.valueOf(0).equals(doctor.getPhaseId())).findFirst().get();    }    @Override    public Object getBookingDurationsConsultantDoctorsV2(DoctorPriceRequestDTO dataParams) {        List<DoctorPriceDTO> priceData = bookingDurationsConsultantDoctorsRepository.getBookingDurationsConsultantDoctorsV2(dataParams);        List<DoctorPriceDTO> defaultPrice = priceData.stream().filter(price -> price.getPhaseId()==0).collect(Collectors.toList());        List<DoctorPriceDTO> phasePrice = priceData.stream().filter(price -> price.getPhaseId()!=0).collect(Collectors.toList());        ResultSelectEntity resultSelectEntity = new ResultSelectEntity();        resultSelectEntity.setListData(phasePrice.size()>0? phasePrice : defaultPrice);        return resultSelectEntity;    }}