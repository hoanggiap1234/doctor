package com.viettel.etc.repositories.impl;import com.viettel.etc.dto.BookingInformationDTO;import com.viettel.etc.dto.WorkingSchedulesDTO;import com.viettel.etc.repositories.BookingInformationRepository;import com.viettel.etc.repositories.tables.entities.BookingInformationsEntity;import com.viettel.etc.utils.Constants;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import com.viettel.etc.xlibrary.core.entities.ResultSelectEntity;import java.util.ArrayList;import org.springframework.stereotype.Repository;import java.util.List;import java.util.HashMap;/** * Autogen class Repository Impl:  *  * @author ToolGen * @date Wed Aug 19 21:30:23 ICT 2020 */@Repositorypublic class BookingInformationRepositoryImpl extends CommonDataBaseRepository implements BookingInformationRepository{        /**     *      *      * @param itemParamsEntity: params client truyen len     * @return     */    @Override    public Object countBookingByBookingGroup(BookingInformationDTO itemParamsEntity){         StringBuilder sql = new StringBuilder();         sql.append("select SUM(case when booking_group = :bookingOrder then 1 else 0 end) as bookingOrder, SUM(case when booking_group = :bookingAdvisory then 1 else 0 end) as bookingAdvisory from booking_informations where doctor_id = :doctorId and is_active = 1 and is_delete =0");         HashMap<String, Object> hmapParams = new HashMap<>();         hmapParams.put("doctorId", itemParamsEntity.getDoctorId());         hmapParams.put("bookingOrder", Constants.BOOKING_GROUP_ORDER);         hmapParams.put("bookingAdvisory", Constants.BOOKING_GROUP_ADVISORY);         return getFirstData(sql, hmapParams, BookingInformationDTO.class);    }    @Override    public List<BookingInformationDTO> getDataByParam(BookingInformationDTO itemParamsEntity) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT bi.booking_id AS bookingId FROM booking_informations bi WHERE bi.is_active = 1 AND bi.is_delete = 0");        HashMap<String, Object> hmapParams = new HashMap<>();        if (itemParamsEntity != null && itemParamsEntity.getDoctorId() != null) {            sql.append(" AND bi.doctor_id = :doctorId");            hmapParams.put("doctorId", itemParamsEntity.getDoctorId());        }        if (itemParamsEntity != null && itemParamsEntity.getRegisterTimeTxt() != null) {            sql.append(" AND bi.register_time_txt like CONCAT('%', :registerTimeTxt, '%') ");            hmapParams.put("registerTimeTxt", itemParamsEntity.getRegisterTimeTxt());        }        if (itemParamsEntity != null && itemParamsEntity.getRegisterDate() != null) {            sql.append(" AND bi.register_date = :registerDate");            hmapParams.put("registerDate", itemParamsEntity.getRegisterDate());        }        Integer start = Constants.START_RECORD_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getStartrecord() != null) {            start = itemParamsEntity.getStartrecord();        }        Integer pageSize = Constants.PAGE_SIZE_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getPagesize() != null) {            pageSize = itemParamsEntity.getPagesize();        }        List<BookingInformationDTO> listData = (List<BookingInformationDTO>) getListData(sql, hmapParams, start, pageSize, BookingInformationDTO.class);        return listData;    }}