package com.viettel.etc.repositories.impl;import com.google.common.base.Strings;import com.viettel.etc.dto.DoctorPriceDTO;import com.viettel.etc.dto.DoctorPriceRequestDTO;import com.viettel.etc.repositories.BookingDurationsConsultantDoctorsRepository;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;/** * Autogen class Repository Impl: * * @author ToolGen * @date Mon Sep 14 15:13:32 ICT 2020 */@Repositorypublic class BookingDurationsConsultantDoctorsRepositoryImpl extends CommonDataBaseRepository implements BookingDurationsConsultantDoctorsRepository {    /**     * Danh sach cac thoi luong kem gia co the dat tu van voi bac si     *     * @param itemParamsEntity: params client truyen len     * @return     */    @Override    public List<DoctorPriceDTO> getBookingDurationsConsultantDoctors(DoctorPriceDTO itemParamsEntity) {        StringBuilder sql = new StringBuilder();        sql.append(" SELECT ");        sql.append(" doctors_price.price_id as priceId, ");        sql.append(" doctors_price.phase_id AS phaseId, ");        sql.append(" doctors_price.doctor_id as doctorId, ");        sql.append(" doctors_price.medical_examination_fee as medicalExaminationFee, ");        sql.append(" doctors_price.medical_examination_number AS medicalExaminationNumber, ");        sql.append(" doctors_price.consultant_fee_videocall AS consultantFeeVideocall, ");        sql.append(" doctors_price.consultant_time_videocall AS consultantTimeVideocall,  ");        sql.append(" doctors_price.consultant_fee_call AS consultantFeeCall,  ");        sql.append(" doctors_price.consultant_time_call AS consultantTimeCall,  ");        sql.append(" doctors_price.consultant_fee_chat AS consultantFeeChat,  ");        sql.append(" doctors_price.consultant_chat_number AS consultantChatNumber ");        sql.append(" FROM doctors_prices AS doctors_price ");        sql.append(" WHERE doctors_price.is_delete = 0");        sql.append("   AND doctors_price.is_active = 1");        HashMap<String, Object> hmapParams = new HashMap<>();        if (itemParamsEntity != null && itemParamsEntity.getDoctorId() != null) {            sql.append(" AND doctors_price.doctor_id = :doctorId ORDER BY doctors_price.phase_id DESC");            hmapParams.put("doctorId", itemParamsEntity.getDoctorId());        }        List<DoctorPriceDTO> listData = (List<DoctorPriceDTO>) getListData(sql, hmapParams, null, null, DoctorPriceDTO.class);        return listData;    }    @Override    public List<DoctorPriceDTO> getBookingDurationsConsultantDoctorsV2(DoctorPriceRequestDTO dataParams) {        HashMap<String, Object> hmapParams = new HashMap<>();        StringBuilder sql = new StringBuilder();        sql.append("SELECT dp.*, cp.healthfacilities_code as healthfacilitiesCode FROM " +                " (SELECT price_id as priceId, phase_id AS phaseId," +                " medical_examination_fee AS medicalExaminationFee, medical_examination_number AS medicalExaminationNumber, " +                " consultant_fee_videocall AS consultantFeeVideocall,consultant_time_videocall AS consultantTimeVideocall, " +                " consultant_fee_call AS consultantFeeCall, consultant_time_call AS consultantTimeCall," +                " consultant_fee_chat AS consultantFeeChat, consultant_chat_number AS consultantChatNumber " +                " FROM doctors_prices WHERE is_active=1 AND is_delete=0  ");        if(dataParams.getDoctorId()!=null){            sql.append(" AND doctor_id=:doctorId ");            hmapParams.put("doctorId", dataParams.getDoctorId());        }        sql.append(") dp");        sql.append(" LEFT JOIN (SELECT phase_id, healthfacilities_code FROM cats_phases WHERE is_active=1 AND is_delete=0 AND from_date<= CURDATE() AND CURDATE()<=to_date ");        if(!Strings.isNullOrEmpty(dataParams.getHealthfacilitiesCode())) {            sql.append(" and healthfacilities_code =:healthFacilityCode ");            hmapParams.put("healthFacilityCode", dataParams.getHealthfacilitiesCode());        }        sql.append(") cp ON cp.phase_id=dp.phaseId");        sql.append(" WHERE cp.phase_id!=0 OR dp.phaseId=0 ORDER BY dp.phaseId DESC ");        List<DoctorPriceDTO> listData = (List<DoctorPriceDTO>) getListData(sql, hmapParams, null, null, DoctorPriceDTO.class);        return listData;    }}